#!/usr/bin/env python
import time
import random
import threading
import numpy as np
import os
import sys
import datetime
import roslib
import rospy
import roslib;roslib.load_manifest('ledpanels')
import functools
from ledpanels import display_ctrl
from ledpanels.msg import MsgPanelsCommand
from ledpanels.srv import *
from std_msgs.msg import Float64
from magnotether.msg import MsgAngleData






class DisplayEvent(object):

    def __init__(self, start_time, duration, display_func):
        self.start_time = start_time
        self.duration = duration
        display_func()

    def is_done(self, t):
        return (t - self.start_time) >= self.duration



class RollingCircularMean(object):

    def __init__(self, size=500):
        self.size = size
        self.data = []

    def insert_data(self,item):
        self.data.append(np.deg2rad(item))
        if len(self.data) > self.size:
            self.data.pop(0)

    def value(self):
        if self.data:
            return np.rad2deg(circmean(self.data))
        else:
            return 0.0 


class ExpScript(object):

    def __init__(self):

        rospy.init_node('exp_script')
        pattern_id2 = functools.partial(self.show_pattern, pattern_id=2, gain_x=30, bias_x = 0)

        self.display_action_list = [
                {'type': 'fixed', 'duration': 2.0, 'func': pattern_id2},
                {'type': 'mean',  'duration': 2.0, 'func': self.mean_angle_to_pattern},
                {'type': 'fixed', 'duration': 2.0, 'func': pattern_id2},
                {'type': 'mean',  'duration': 2.0, 'func': self.mean_angle_to_pattern},
                {'type': 'fixed', 'duration': 2.0, 'func': pattern_id2},
                ]

        self.config_id = 1
        self.ctrl = display_ctrl.LedControler()
        self.ctrl.set_config_id(self.config_id)

        self.start_t = rospy.get_time()
        self.lock = threading.Lock()
        self.rolling_circ_mean = RollingCircularMean(size=500)
        self.angles = rospy.Subscriber('/angle_data', MsgAngleData,self.on_angle_data_callback) 
        self.display_event = DisplayEvent(0.0, 0.0, self.do_nothing)

    def mean_angle_to_pattern(self, mean_angle):
        if mean_angle < 0:
            display_func = functools.partial(self.show_pattern, pattern_id=11, gain_x=30, bias_x = 0)
        else:
            display_func = functools.partial(self.show_pattern, pattern_id=12, gain_x=60, bias_x = 0)
        return display_func


    def on_angle_data_callback(self, data): 
        with self.lock:
            self.rolling_circ_mean.insert_data(data.angle)

    def elapsed_time(self):
        return rospy.get_time() - self.start_t

    def show_pattern(self, pattern_id, gain_x, bias_x):
        self.ctrl.stop()
        self.ctrl.set_pattern_id(pattern_id)      
        self.ctrl.send_gain_bias(gain_x = gain_x, bias_x = bias_x,gain_y = gain_x,bias_y =bias_x)
        self.ctrl.start()

    def do_nothing(self):
        pass

    def run(self):
        done = False
        while (not rospy.is_shutdown()) and (not done):

            # Get elapsed time and rolling mean of angle data
            dt = self.elapsed_time()
            with self.lock:
                mean_angle = self.rolling_circ_mean.value()

            # Check if current display event is done if so selet next display event
            if self.display_event.is_done(dt):
                if self.display_action_list:
                    current_action = self.display_action_list.pop(0)
                    print(current_action['type'])
                    if current_action['type'] == 'fixed':
                        duration = current_action['duration']
                        display_func = current_action['func']
                    elif current_action['type'] == 'mean':
                        duration = current_action['duration']
                        display_func = current_action['func'](mean_angle)
                    else:
                        raise RuntimeError('unknow display action type {}'.format(current_action))
                    self.display_event = DisplayEvent(dt, duration, display_func)
                else:
                    done = True

        self.clean_up()


    def clean_up(self):
        self.ctrl.stop() 
        self.ctrl.all_off() 


# Utility functions
# -------------------------------------------------------------------------------------------------
def circmean(alpha,axis=None):
    mean_angle = np.arctan2(np.mean(np.sin(alpha),axis),np.mean(np.cos(alpha),axis))
    return mean_angle

def circvar(alpha,axis=None):
    R = np.sqrt(np.sum(np.sin(alpha),axis)**2 + np.sum(np.cos(alpha),axis)**2)/len(alpha)
    V = 1-R
    return R

def get_smallestSignedAngleBetween(ax, y):
    yy=np.deg2rad(np.ones(len(ax))*y)
    axx = np.deg2rad(ax)



# --------------------------------------------------------------------------------------------------
if __name__ == '__main__':
    exp_scrpt = ExpScript()
    exp_scrpt.run()


